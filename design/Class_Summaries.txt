Director
  - Directs the other classes to create the Cycle game
  - Has a Window/GUI to update until the game is over
    - Game Over and Window Close should be two separate booleans
      - When Game Over (Cycles collide, Collision Handler check), Everything whites out (all colors --> "white"/pyray.RAYWHITE/(0, 0, 0, 0)) and collisions are no longer handled and messages are no longer updated
      - When Window Close, the Window's Close() method is called and the program is ended

Actor (base class)
TODO: Rename .get_symbol() --> .get_display()
  - Contains all the shared Attribtues and Methods of classes such as Cycle, Message, etc
    - Point position
    - font_size
    - Color (pyray)
   - Getters/Setters are created here and shared to classes which inherit from Actor


[Hailey]
Graphic Interface/Window
  - You can call it whatever you'd like, it's just the class that uses the pyray module and is in charge of displaying things
  - Copy the previous class, but update it so it can print all the Actors and Messages by asking the Cast instead of having each Actor passed to it (so "for actor in class.get_actors: pyray.print_text(...)")
  - 
Point
  - The [x, y] position of the Actor on the pyray Window
  - Also have a method to change the position if the Point is on the edge of the screen
    - When the Point position is equal to 0 or max_x/max_y, loop back to the other side
      - ("if self._pos_y == 0: self._pos_y = self._max_y | elif self._pos_y == self._max_y: self._pos_y = 0")
Color
  - The pyray Color for the Actor to be displayed in
  
  
 [Matt]
 Player_input and Key_set
  - player_input will be adjusted so the player can only move up/down OR left/right (if dy != 0, dx = 0, and vice versa)
  - player_input will rely on a key_set from when it is initialized (def __init__(self, key_set)) or from another method set_key_bindings (Director/Player calls self._key_set.set_keys("W","A","S","D"))
  Player/Cycle and Trail/Trail_Piece
  - Player/Cycle will inherit from Actor (gains shared Attributes like Point position, font_size, color, etc)
    - There MIGHT need to be a secondary Cycle class for Player2, since a lot of the Attributes need to be set differently (spawn point, key_set, color, etc)
      - Also would help with meeting the 16 class requirement. Would inherit Methods from Cycle but __init__ would differ
    - Contains a list of Trail_pieces (oe a Trail object to add another class - would also include methods for moving the trail)
      - Each Trail_piece needs to follow the object ahead of itself
      - Use velocity to determine location? (If ahead has velocity <--, print --> as to follow it?)
 
 
 [John]
 Message
  - Message class will inherit from the Actor class (which contains position (Point) and other display information that it shares)
    - To have clear variable names and prevent confusion, a new Attribute self._message can be created and used instead of self._symbol, but it will serve the same purpose
  Score
  - Score class will be adjusted so it inherits from the Message class ("class Score(Message): ")
    - The get_symbol/get_display method will differ (be overridden) since Score also stores the score as an integer (self._message = "Score:" and self._score = 10, then "return f"{self._message} {self._score}")
  Cast
  - Cast is simply a collection of all the Actors (Cycles and Messages) that will be displayed on the screen
    - The GUI class will ask the Cast class for a list of Actors so it can print them using a for loop ("return self._actor_list")
 
 
 [Ethan]
 Collision Handler
    - The Collision Handler class will report back to the Director if a collision has occured (Director class: "if self._collision_handler.is_collision(): self._game_over = True")
 Hitbox
    - Hitboxes will determine how close two objects can be before they collide.
      - Instead of using a point system, there needs to be a range, otherwise it would be nearly impossible for the Actors to be on the same Point position and collide
      - Calculated using the font_size of an Actor/Cycle (Point +/- font_size//2 to find the edges of the character/symbol that is displayed)
      - Hitboxes will be an Attribute of Player/Cycle (Player has a hitbox) that will give it the font_size
